{"randomArticles":[{"articleTitle":"PHP 没有块级作用域","articleAbstractText":"&lt;?php $arr = range(0, 9); foreach ($arr as $k =&gt; $v) { if ($v/2 == 0) { $flag = true; } else if ($v &gt; 6) { $flag = true; } if (isset($flag)) { // do something echo \"I Love PHP!\\n\"; } } 以上代码除了 $arr 中的值为偶数和大于 6 时会输出\u201dI Love PHP!\" ，其它情况也会输出，一开始，我是有点困惑的，搞了好些时间才搞明白。 简单分析下解决的过程：这个代码片段是在最近排查系统的 bug 是看到的，流程做了些简化。代码是我本人写的😓，系统在最开始并没有出现问题，上线一段时候后，就出 bug 了。有的人可能一眼就看出来问题在哪了，但是如果你对 PHP 的变量的作用域不太了解的话，就很容易栽进这坑里。 PHP 有函数作用域，但没有像 c/c++、java 等语言的块及作用域。例如在 c++ 里： for (int i = 0; i &lt; 10; i++) { cout &amp....","articleStatus":0,"articlePermalink":"/articles/2018/06/28/1530144000251.html","articleImg1URL":"https://b3logfile.com/bing/20200911.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Vue.js和微信小程序学习心得总结","articleAbstractText":"Vue.js 总的来说 vue 的官方文档做的真心不错，整个文档由浅入深，循序渐进的介绍了 vue 的基本概念和框架的设计理念。过程中辅以简单的实例加深了对概念性知识点的理解，不过要构建完整的 vue 项目还需要对 Node 和 commonJS 标准有所了解，有一定的学习成本。 Vue 的实例是整个框架的核心，依托强大的组件系统，可以轻松的操作和构建灵活的模板系统。 服务器端渲染（ssr）配合单文件的 Vue 组件开发是目前流行的开发方式，个人觉得单纯的开发简单应用完全没必要了解太多技术点，但是大型复杂项目需要深入理解核心原理和概念。 微信小程序 按照官方开发手册和网上的小程序实例跑了一遍小程序官方 Demo，开发效率应该比较高，这里着重以下几个开发的关键点： 首先是要对小程序的目录结构及其各个文件的作用充分了解，这样在构建页面布局和数据交互上会比较顺手。 其次要在小程序的事件机制的原理上多下功夫，尽管每个页面大体相似，但是也有必要清楚每一个事件的具体含义及调用过程。 第三点就是小程序的组件，微信官方提供大量现成的组件示例，例如视图容器、基础内容、表单、导航等等，即规范又....","articleStatus":0,"articlePermalink":"/articles/2017/11/08/1510099200180.html","articleImg1URL":"https://b3logfile.com/bing/20181021.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"从多任务到专注思考：如何让生活化繁为简？","articleAbstractText":"有步骤的分解任务 每天留出一段黄金时间，不受任何打扰，什么都不干\u2014\u2014就算还有许多事情没做完，也不要急着开工，而是静下心来，安静地冥想。 在冥想的时候，我会按照这几个步骤思考： @复盘 我今天做了什么？ 近段时间里，各个项目的进展如何？是否按照预想的方向前进？ 在项目的执行中，遇到了什么问题，分别是由什么原因造成的？可以如何去规避？ @策略 我接下去要做些什么 通过这些事情，我要达到什么目的 这个方向是最好的吗？有没有别的方向？ @规划 我要如何达到第二步目标 如何把这个任务分解成小任务，分别在什么时候完成？ 有哪些信息需要了解，我需要在什么时候确定这些信息？ 具体操作 通常，这些问题很难一下子全部都得到答案。我会打开 Onenote，将想到的各个点记下来，画成层次图，不断修正、调整，整理自己的思维。 也许，思考的结果，会推翻昨天得到的某个结论。这个时候，就会重新打开昨天的笔记，进行审视和对比，然后将修改结果重新写下来。 最后，我会留下某几个问题，放到一则叫做「聚焦」的笔记里面\u2014\u2014它们就是我经过分析之后，需要去思考和处理的最重要的问题。 这也就是我第二天工作和思考的重心。 简....","articleStatus":0,"articlePermalink":"/articles/2018/03/06/1520294400095.html","articleImg1URL":"https://b3logfile.com/bing/20180406.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"网络时代的认知惰性","articleAbstractText":"网络时代的认知惰性：对互联网的依赖本身是一种成瘾。 现在走在任何一个地方，都能看到\u201c低头族\u201d\u2014\u2014两眼无法从手机屏幕上挪开\u2014\u2014这些人中有玩游戏的，有聊天的，有刷微博的，有混朋友圈的，要说这专注的劲头，的确值得欣赏。 注意力是互联网经济的一个核心要素，人们依赖网络，便捷只是原因之一，更重要的是网络上的信息能够把注意力牢牢吸引住。","articleStatus":0,"articlePermalink":"/articles/2018/05/13/1526169600165.html","articleImg1URL":"https://b3logfile.com/bing/20190303.jpg?imageView2/1/w/960/h/540/interlace/1/q/100"},{"articleTitle":"Linux 设置系统时间及同步网络时间","articleAbstractText":"Linux 的时间分为 System Clock （系统时间）和 Real Time Clock （硬件时间，简称 RTC）。 系统时间：指当前 Linux Kernel 中的时间。 硬件时间：指主板上有电池供电的时间。 1. 查看系统时间： bash # date # 例： ➜ ~ date # Output 2018年 3月 7日 星期三 12时01分15秒 CST 设置系统时间： # date --set \"月/日/年 时:分:秒\" # 例: ➜ ~ date --set \"01/01/2049 00:00:00\" # Output 2049年 1月 1日 星期五 00时00分00秒 CST 同步网络时间 除了手动设置系统时间外，也可与采用和网络时间进行同步的方式。下面介绍一下不同发行版本如何与时间服务器上的时间同步的方法 安装 nptdate 工具 CentOS $ sudo yum -y install ntp ntpdate Ubuntu $ sudo apt-get install ntp ntpdate 设....","articleStatus":0,"articlePermalink":"/articles/2018/03/07/1520380800151.html","articleImg1URL":"https://b3logfile.com/bing/20201018.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}