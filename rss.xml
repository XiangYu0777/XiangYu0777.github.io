<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>Tristana 的博客</title>
    <link>https://xiangyu0777.github.io</link>
    <atom:link href="https://xiangyu0777.github.io/rss.xml" rel="self" type="application/rss+xml"/>
    <description>记录精彩的人生</description>
    <generator>Solo, v4.3.1, https://b3log.org/solo</generator>
    <lastBuildDate>Wed, 28 Oct 2020 00:54:04 +0800</lastBuildDate>
    <language>zh-cn</language>
    <item>
      <title>502 Bad Gateway 什么意思，如何解决？</title>
      <link>https://xiangyu0777.github.io/articles/2018/06/01/1527811200204.html</link>
      <description><![CDATA[<p>浏览器访问网站是的时候出现 "Bad Gateway" 错误是什么原因导致的？我们又该如何快速的解决呢？</p>]]></description>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2018/06/01/1527811200204.html</guid>
      <category>PHP</category>
      <category>服务器</category>
      <pubDate>Wed, 28 Oct 2020 00:47:03 +0800</pubDate>
    </item>
    <item>
      <title>关于我</title>
      <link>https://xiangyu0777.github.io/articles/2020/10/27/1603813183476.html</link>
      <description/>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2020/10/27/1603813183476.html</guid>
      <category>我</category>
      <pubDate>Tue, 27 Oct 2020 23:40:20 +0800</pubDate>
    </item>
    <item>
      <title>网络时代的认知惰性</title>
      <link>https://xiangyu0777.github.io/articles/2018/05/13/1526169600165.html</link>
      <description><![CDATA[<p>网络时代的认知惰性：对互联网的依赖本身是一种成瘾。 现在走在任何一个地方，都能看到“低头族”——两眼无法从手机屏幕上挪开——这些人中有玩游戏的，有聊天的，有刷微博的，有混朋友圈的，要说这专注的劲头，的确值得欣赏。 注意力是互联网经济的一个核心要素，人们依赖网络，便捷只是原因之一，更重要的是网络上的信息能够把注意力牢牢吸引住。</p>]]></description>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2018/05/13/1526169600165.html</guid>
      <category>注意力</category>
      <category>认知</category>
      <category>网络</category>
      <pubDate>Tue, 27 Oct 2020 02:59:20 +0800</pubDate>
    </item>
    <item>
      <title>PHP 没有块级作用域</title>
      <link>https://xiangyu0777.github.io/articles/2018/06/28/1530144000251.html</link>
      <description><![CDATA[<p>&lt;?php $arr = range(0, 9); foreach ($arr as $k =&gt; $v) { if ($v/2 == 0) { $flag = true; } else if ($v &gt; 6) { $flag = true; } if (isset($flag)) { // do something echo "I Love PHP!\n"; } }  以上代码除了 $arr 中的值为偶数和大于 6 时会输出”I Love PHP!" ，其它情况也会输出，一开始，我是有点困惑的，搞了好些时间才搞明白。 简单分析下解决的过程：这个代码片段是在最近排查系统的 bug 是看到的，流程做了些简化。代码是我本人写的]]>😓<![CDATA[，系统在最开始并没有出现问题，上线一段时候后，就出 bug 了。有的人可能一眼就看出来问题在哪了，但是如果你对 PHP 的变量的作用域不太了解的话，就很容易栽进这坑里。 PHP 有函数作用域，但没有像 c/c++、java 等语言的块及作用域。例如在 c++ 里： for (int i = 0; i &lt; 10; i++) { cout &amp;lt....</p>]]></description>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2018/06/28/1530144000251.html</guid>
      <category>PHP</category>
      <pubDate>Thu, 28 Jun 2018 08:00:00 +0800</pubDate>
    </item>
    <item>
      <title>Redis Snippet</title>
      <link>https://xiangyu0777.github.io/articles/2018/05/29/1527552000137.html</link>
      <description><![CDATA[<p>基本数据类型 字符串 string、列表 list、无序集合 set、有序集合 zset、散列表 hash。 支持的特性  将内存中的数据持久化到硬盘 使用复制来扩展读性能 使用分片来扩展写性能  键的过期时间 对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。</p>]]></description>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2018/05/29/1527552000137.html</guid>
      <category>Redis</category>
      <category>数据库</category>
      <pubDate>Tue, 29 May 2018 08:00:00 +0800</pubDate>
    </item>
    <item>
      <title>MySQL 慢查询优化</title>
      <link>https://xiangyu0777.github.io/articles/2018/03/28/1522195200160.html</link>
      <description><![CDATA[<p>建立索引的五大原则  最左前缀匹配原则。 “=” 和 “in” 可以乱序。 尽量选择区分度高的列作为索引。 索引列不能参与计算。 尽量扩展索引，不要新建索引。  查询优化神器 - explain命令 慢查询优化基本步骤  先运行看看是否真的很慢，注意设置 SQL_NO_CACHE where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高 explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询） order by limit 形式的 sql 语句让排序的表优先查 了解业务方使用场景 加索引时参照建索引的几大原则 观察结果，不符合预期继续从0分析</p>]]></description>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2018/03/28/1522195200160.html</guid>
      <category>MySQL</category>
      <pubDate>Wed, 28 Mar 2018 08:00:00 +0800</pubDate>
    </item>
    <item>
      <title>Linux 设置系统时间及同步网络时间</title>
      <link>https://xiangyu0777.github.io/articles/2018/03/07/1520380800151.html</link>
      <description><![CDATA[<p>Linux 的时间分为 System Clock （系统时间）和 Real Time Clock （硬件时间，简称 RTC）。  系统时间：指当前 Linux Kernel 中的时间。 硬件时间：指主板上有电池供电的时间。   1. <strong>查看系统时间</strong>： <code>bash # date # 例： ➜ ~ date # Output 2018年 3月 7日 星期三 12时01分15秒 CST</code>  设置系统时间：   # date --set "月/日/年 时:分:秒" # 例: ➜ ~ date --set "01/01/2049 00:00:00" # Output 2049年 1月 1日 星期五 00时00分00秒 CST    同步网络时间 除了手动设置系统时间外，也可与采用和网络时间进行同步的方式。下面介绍一下不同发行版本如何与时间服务器上的时间同步的方法   安装 nptdate 工具  CentOS   $ sudo yum -y install ntp ntpdate   Ubuntu   $ sudo apt-get install ntp ntpdate    设....</p>]]></description>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2018/03/07/1520380800151.html</guid>
      <category>技术</category>
      <pubDate>Wed, 07 Mar 2018 08:00:00 +0800</pubDate>
    </item>
    <item>
      <title>从多任务到专注思考：如何让生活化繁为简？</title>
      <link>https://xiangyu0777.github.io/articles/2018/03/06/1520294400095.html</link>
      <description><![CDATA[<p>有步骤的分解任务 每天留出一段黄金时间，不受任何打扰，什么都不干——就算还有许多事情没做完，也不要急着开工，而是静下心来，安静地冥想。 在冥想的时候，我会按照这几个步骤思考： @复盘  我今天做了什么？ 近段时间里，各个项目的进展如何？是否按照预想的方向前进？ 在项目的执行中，遇到了什么问题，分别是由什么原因造成的？可以如何去规避？  @策略  我接下去要做些什么 通过这些事情，我要达到什么目的 这个方向是最好的吗？有没有别的方向？  @规划  我要如何达到第二步目标 如何把这个任务分解成小任务，分别在什么时候完成？ 有哪些信息需要了解，我需要在什么时候确定这些信息？  具体操作 通常，这些问题很难一下子全部都得到答案。我会打开 Onenote，将想到的各个点记下来，画成层次图，不断修正、调整，整理自己的思维。 也许，思考的结果，会推翻昨天得到的某个结论。这个时候，就会重新打开昨天的笔记，进行审视和对比，然后将修改结果重新写下来。 最后，我会留下某几个问题，放到一则叫做「聚焦」的笔记里面——它们就是我经过分析之后，需要去思考和处理的最重要的问题。 这也就是我第二天工作和思考的重心。 简....</p>]]></description>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2018/03/06/1520294400095.html</guid>
      <category>生活</category>
      <pubDate>Tue, 06 Mar 2018 08:00:00 +0800</pubDate>
    </item>
    <item>
      <title>Vue.js和微信小程序学习心得总结</title>
      <link>https://xiangyu0777.github.io/articles/2017/11/08/1510099200180.html</link>
      <description><![CDATA[<p>Vue.js 总的来说 vue 的官方文档做的真心不错，整个文档由浅入深，循序渐进的介绍了 vue 的基本概念和框架的设计理念。过程中辅以简单的实例加深了对概念性知识点的理解，不过要构建完整的 vue 项目还需要对 Node 和 commonJS 标准有所了解，有一定的学习成本。 Vue 的实例是整个框架的核心，依托强大的组件系统，可以轻松的操作和构建灵活的模板系统。 服务器端渲染（ssr）配合单文件的 Vue 组件开发是目前流行的开发方式，个人觉得单纯的开发简单应用完全没必要了解太多技术点，但是大型复杂项目需要深入理解核心原理和概念。 微信小程序 按照官方开发手册和网上的小程序实例跑了一遍小程序官方 Demo，开发效率应该比较高，这里着重以下几个开发的关键点：   首先是要对小程序的目录结构及其各个文件的作用充分了解，这样在构建页面布局和数据交互上会比较顺手。   其次要在小程序的事件机制的原理上多下功夫，尽管每个页面大体相似，但是也有必要清楚每一个事件的具体含义及调用过程。   第三点就是小程序的组件，微信官方提供大量现成的组件示例，例如视图容器、基础内容、表单、导航等等，即规范又....</p>]]></description>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2017/11/08/1510099200180.html</guid>
      <category>技术</category>
      <category>语言</category>
      <pubDate>Wed, 08 Nov 2017 08:00:00 +0800</pubDate>
    </item>
    <item>
      <title>PHP 函数 header() 的用法归纳</title>
      <link>https://xiangyu0777.github.io/articles/2017/04/22/1492819200118.html</link>
      <description><![CDATA[<p>301 永久重定向   &lt;?php header('HTTP/1.1 301 Moved Permanently'); header('Location: <a href="http://www.example.com" target="_blank">http://www.example.com</a>'); exit(); ?&gt;   302 临时重定向   &lt;?php header('Location: <a href="http://www.example.com" target="_blank">http://www.example.com</a>'); exit(); ?&gt;   404 页面未找到   &lt;?php header('HTTP/1.1 404 Not Found'); ?&gt;   503 服务不可用   &lt;?php header('HTTP/1.1 503 Service Temporarily Unavailable'); header('Status: 503 Service Temporarily Unavailable'); exit(); ?&gt;   设置内容类型   &lt;?php // html header('Content-Type: text/html; charset=iso-8859-1'); head....</p>]]></description>
      <author>Tristana</author>
      <guid>https://xiangyu0777.github.io/articles/2017/04/22/1492819200118.html</guid>
      <category>PHP</category>
      <pubDate>Sat, 22 Apr 2017 08:00:00 +0800</pubDate>
    </item>
  </channel>
</rss>
